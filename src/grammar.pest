ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")+ }
bech32 = _{ ASCII_ALPHANUMERIC+ }

COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* }
WHITESPACE = _{ " " | "\t" }

isae_name = { ASCII_ALPHA_UPPER{2,} }
isae = { ".ISAE" ~ (isae_name | NEWLINE)+ }

reg_a = @{ ^"a" }
reg_f = @{ ^"f" }
reg_f16b = @{ ^"f16b" }
reg_r = @{ ^"r" }
reg_s = @{ ^"s" }
reg_member = @{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT{, 3} }
reg_index = @{ ASCII_DIGIT{, 2} }
reg = ${ (((reg_a | reg_f | reg_r | reg_s) ~ reg_member) | reg_f16b) ~ "[" ~ reg_index ~ "]" }


char_unicode = @{ "\\u{" ~ ASCII_HEX_DIGIT{1, 6} ~ "}"  }
char_hex = @{ "\\x" ~ ('0'..'7')? ~ ASCII_HEX_DIGIT }
char_lf = @{ "\\n" }
char_cr = @{ "\\r" }
char_ht = @{ "\\t" }
char_null = @{ "\\0" }
char_bs = @{ "\\\\" }
char_special = _{ char_lf | char_cr | char_ht | char_bs | char_null | char_unicode | char_hex }

lit_significand_int = @{ ASCII_DIGIT+ }
lit_significand_res = @{ ASCII_DIGIT+ }
lit_exponential = @{ ASCII_DIGIT+ }
lit_float = ${ lit_significand_int ~ "." ~ lit_significand_res ~ (^"e" ~ lit_exponential)? }
lit_dec = @{ ASCII_DIGIT+ }
lit_hex = @{ ^"0x" ~ ASCII_HEX_DIGIT+ }
lit_oct = @{ ^"0o" ~ ASCII_OCT_DIGIT+ }
lit_bin = @{ ^"0b" ~ ("1" | "0")+ }
lit_str = @{ "\"" ~ (!(NEWLINE | "\"") ~ ANY)* ~ "\"" }
lit_chr = @{ "\'" ~ (ANY | char_special) ~ "\'" }
lit_num = _{ lit_dec | lit_hex | lit_oct | lit_bin }
lit = { lit_float | lit_hex | lit_oct | lit_bin | lit_dec | lit_str | lit_chr }

lib_ident = { ident }
lib_bech = @{ ^"alu1" ~ bech32 }
lib_name = { lib_bech | lib_ident }
lib_def = { lib_ident ~ lib_ident ~ NEWLINE+ }
libs = {  ".LIBS" ~ NEWLINE* ~ lib_def* }

goto_fwd = @{ "+" }
goto_rev = @{ "-" }
goto_exact = @{ "=" }
goto_offset = _{ (goto_fwd | goto_rev | goto_exact) ~ lit_num }
goto_name = { ident }
goto = { goto_name | goto_offset }

call_name = { ident }
call = { lib_name? ~ "->" ~ call_name }

label = { ident }
flag = { ASCII_ALPHA_LOWER }
op = { ident }
operand = _{ reg | call | lit | var | goto }
operator = ${ op ~ ("." ~ flag{1,2})? }
instruction = { (label ~ ":")? ~ NEWLINE* ~ operator ~ (operand ~ ",")* ~ operand? ~ NEWLINE+ }

routine_name = { ident }
routine_main = { ".MAIN" ~ NEWLINE* }
routine_decl = _{ ".ROUTINE" ~ routine_name ~ NEWLINE* }
routine = { (routine_decl | routine_main) ~ instruction* }

var_name = { ident }
var = ${ "$" ~ var_name }

const_decl = { var ~ "=" ~ lit ~ NEWLINE+ }
data = { ".CONST" ~ NEWLINE* ~ const_decl* }

input_name = { lit_str }
input_decl = { var ~ input_name ~ NEWLINE+ }
input = { ".INPUT" ~ NEWLINE* ~ input_decl* }

segment = _{ isae | routine | libs | data | input }
program = { SOI ~ segment+ ~ EOI }
